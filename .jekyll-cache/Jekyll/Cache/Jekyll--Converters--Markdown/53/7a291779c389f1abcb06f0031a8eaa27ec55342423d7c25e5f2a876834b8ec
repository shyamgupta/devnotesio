I"K	<h2 id="introduction">Introduction</h2>
<p>Microservices are independently deployable services modeled around a business domain.
The Microservices Architecture (MSA) decomposes systems into discrete, individual, standalone components that can communicate amongst themselves, working together or with external systems.</p>

<p>What sets a microservices architecture apart from more traditional, monolithic approaches is how it breaks an app down into its core functions. Each function is called a service, self-contained and can be built and deployed independently, meaning individual services can function (and fail) without negatively affecting the others.</p>

<p><img src="/assets/img/microservices.png" alt="Microservices" class="img-fluid img-thumbnail" /></p>

<ul>
  <li><strong>Independent Deployability</strong>: Independent deployability is the idea that we can make a change to a microservice and deploy it into a production environment without having to utilize any other services. To guarantee independent deployability, we need to ensure our services are loosely coupled—in other words, we need to be able to change one service without having to change anything else. This means we need explicit, well-defined, and stable contracts between services.</li>
  <li><strong>Modeled Around a Business Domain</strong>: Rolling out a feature that requires changes to one or more microservices is expensive. You need to coordinate the work across each service (and potentially across separate teams) and carefully manage the order in which the new versions of these services are deployed. In a traditional 3-Tier archirecture, each layer represents a different service boundary, with each service boundary based on related technical functionality. Experience has shown that changes in functionality typically span multiple layers in these types of architectures—requiring changes in presentation, application, and data tiers. By making our services end-to-end slices of business functionality, as shown below, we ensure that our architecture is arranged to make changes to business functionality as efficient as possible. Each service, if needed, can encapsulate presentation, business logic, and data storage.</li>
</ul>

<p><img src="/assets/img/domain.png" alt="Business Domain" class="img-fluid img-thumbnail" /></p>

<h2 id="service-registry">Service Registry</h2>
:ET