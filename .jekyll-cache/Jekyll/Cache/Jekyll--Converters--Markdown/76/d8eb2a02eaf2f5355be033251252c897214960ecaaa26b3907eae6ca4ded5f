I"u<h2 id="basic-auth">Basic Auth</h2>
<p>Basic Auth is the simplest protocol available for performing web service authentication over HTTP protocol.</p>
<ul>
  <li>Basic Auth requires a username and password.</li>
  <li>The client calling the web service takes these two credentials, converts them to a single Base 64–encoded value and passes it along in the Authentication HTTP header.</li>
  <li>The server compares the credentials passed to those stored. If it matches, the server fulfills the request and provides access to the data.</li>
  <li>If the Authentication HTTP header is missing or the password doesn’t match the user name, the server denies access and returns a 401 status code, which means the request is Unauthorized.</li>
</ul>

<h2 id="spring-security">Spring Security</h2>
<p>Spring Security is a part of the Spring Framework and provides authentication, authorization and other security features for Spring-based applications.</p>
<ul>
  <li><code class="highlighter-rouge">spring-boot-starter-security</code> - Maven dependency that adds security module.</li>
  <li><code class="highlighter-rouge">@EnableWebSecurity</code> - Annotation that enables Spring Security’s support.</li>
</ul>

<p>In the below steps, we will see how to use Spring Security and Basic Auth to secure our APIs.</p>

<p><strong>Step 1: Maven Dependencies</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-security<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>
<p><br /></p>

<p><strong>Step 2: Create a Java Class that extends WebSecurityConfigurerAdapter</strong></p>

:ET