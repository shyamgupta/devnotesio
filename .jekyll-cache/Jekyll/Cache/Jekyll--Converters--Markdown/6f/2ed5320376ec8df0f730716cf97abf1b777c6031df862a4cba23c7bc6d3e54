I"é<p>In this section we will learn about some useful annotations associated with the Spring framework.</p>

<h2 id="component">@Component</h2>
<p>During initial release of Spring, all beansÂ  used to be declared in an XML file. For a large project, this quickly becomes a massive task. In later versions of Spring, annotation-based dependency injection and Java-based configuration were provided which automatically scans and register classes as Spring bean that are annotated with @Component. Spring is able to auto scan, detect and instantiate your beans from pre-defined project package, no more tedious beans declaration in in XML file. Applying this annotation to class informs Spring that the class is a component and an object of this class can be instantiated and injected into another component.</p>

<p><strong><em>@Component is a generic stereotype for any Spring-managed component. @Repository, @Service, and @Controller are specializations of @Component</em></strong> for more specific use cases, for example:</p>
<ul>
  <li><strong>@Service</strong>: Denotes that the class provides some services. A service is any class that provides methods to interact with domain logic or external components without maintaining state that changes the overall behavior of the service. For example, a service may act on behalf of an application to obtain documents from a database or obtain data from an external REST API.</li>
  <li><strong>@Repository</strong>: This annotation indicates that the class deals with CRUD operations</li>
  <li><strong>@Controller</strong>: Mostly used with web applications or REST web services to specify that the class is a front controller and responsible to handle user request and return appropriate response.</li>
</ul>

<p>Spring @Component annotation is used to denote a class as Component. It means that Spring framework will autodetect these classes for dependency injection when annotation-based configuration and classpath scanning is used.</p>

<p>By using the above annotations, Spring creates automatic wiring in these two ways:</p>
<ul>
  <li><strong>Component scanning</strong>: In this, Spring automatically searches the beans to be created in the Spring IoC container</li>
  <li><strong>Autowiring</strong>: In this, Spring automatically searches the bean dependencies in the Spring IoC container</li>
</ul>

<p>Spring needs to know which packages to scan for annotated components in order to add them to the IoC container. In a Spring Boot project, we typically set the main application class with the @SpringBootApplication annotation. Under the hood, @SpringBootApplication is a composition of the @Configuration,Â  @ComponentScan, and @EnableAutoConfiguration annotations. With this default setting, Spring Boot will auto scan for components in the current package (containing the @SpringBoot main class) and its sub packages.</p>

<p>Letâ€™s see the following TransferService interface:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">TransferService</span> <span class="o">{</span> 
      <span class="kt">void</span> <span class="nf">transferAmmount</span><span class="o">(</span><span class="nc">Long</span> <span class="n">a</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">b</span><span class="o">,</span> <span class="nc">Amount</span> <span class="n">amount</span><span class="o">);</span> 
<span class="o">}</span> 
</code></pre></div></div>
<p><br /></p>

<p>Its implementation  TransferServiceImpl is annotated with the @Component annotation. This annotation is used to identify this class as a component class, which means, it is eligible to scan and create a bean of this class. Now there is no need to configure this class explicitly as a bean either by using XML or Java configurationâ€“Spring is now responsible for creating the bean of the TransferServiceImpl class, because it is annotated with @Component:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span> 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TransferServiceImpl</span> <span class="kd">implements</span> <span class="nc">TransferService</span> <span class="o">{</span> 
	<span class="nd">@Override</span> 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">transferAmmount</span><span class="o">(</span><span class="nc">Long</span> <span class="n">a</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">b</span><span class="o">,</span> <span class="nc">Amount</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span> 
		<span class="c1">//business code here </span>
	<span class="o">}</span> 
<span class="o">}</span> 
</code></pre></div></div>
<p><br /></p>

<p>In Spring, you have to enable component scanning in your application, because it is not enabled by default. You have to create a configuration Java file, and annotate it with @Configuration and @ComponentScan. This class is used to search out classes annotated with @Component, and to create beans from them. Since these annotations are so frequently used together (especially if you follow the best practices above), Spring Boot provides a convenient @SpringBootApplication alternative.
The @SpringBootApplication annotation is equivalent to using @Configuration, @EnableAutoConfiguration and @ComponentScan with their default attributes: [â€¦]</p>

:ET