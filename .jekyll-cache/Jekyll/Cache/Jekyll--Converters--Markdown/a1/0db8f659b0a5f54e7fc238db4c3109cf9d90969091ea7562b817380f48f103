I"º<h2 id="maven">Maven</h2>

<p>Maven is a software project management and comprehension tool. With the help of Maven, Spring Boot will be able to configure and install dependencies, compile our Java code and run our class files. Below is how you can install it using Homebrew and check the version to verify for a successful installation.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>maven
mvn <span class="nt">--version</span>
</code></pre></div></div>
<p><br /></p>

<h2 id="creating-a-spring-boot-application-in-spring-tool-suite">Creating a Spring Boot Application in Spring Tool Suite</h2>

<p>Click New -&gt; Spring Starter Project and fill the below information:</p>
<ul>
  <li>Name: This will be your project name in lowercase</li>
  <li>Group: This will be a reverse domain name, example com.johndoe.learn</li>
  <li>Artifact: project_name</li>
  <li>Description: Short project description</li>
  <li>Package: Same as the group field</li>
</ul>

<p>Click Next and select ‚ÄòSpring Web‚Äô under the Available column Click Finish.</p>

<p>Our application will reside in <code class="highlighter-rouge">/src/main/java</code> , static files and templates will reside in <code class="highlighter-rouge">src/main/resources</code>.</p>

<h2 id="hello-world">Hello World</h2>
<p>Open the .java file under src/main/java and add the below code:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="c1">// Add below annotation</span>
<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldController</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">HelloWorldApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="c1">// Request mapping for root route</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">hello</span><span class="o">(){</span>
		<span class="k">return</span> <span class="s">"Hello World!"</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Make sure to import the dependencies <code class="highlighter-rouge">CMD + SHIFT + O</code> in Mac for the @RestController and @RequestMapping annotations to work. Once you run the application, visit localhost:8080 in the browser.</p>

<ul>
  <li><code class="highlighter-rouge">@RestController</code> annotation signifies that the class in our Java file is a Controller in the MVC framework, and allows our controller to respond with data.</li>
  <li><code class="highlighter-rouge">@RequestMapping</code> annotation is for mapping web requests onto specific handler classes (class level) and/or handler methods (method level). What we have used above is a method level handler. In the above example, our handler method will respond to the root (‚Äú/‚Äù) route.</li>
</ul>

<h4 id="controller">Controller</h4>
<p>In the Spring framework, a Controller is a class which is responsible for:</p>
<ol>
  <li>Prepare the model/data that needs to be displayed by the view</li>
  <li>Choosing the right view to display the data. It can also directly write into response stream by using @ResponseBody annotation and complete the request.</li>
</ol>

<p>@Controller annotation marks a class as a Spring MVC controller, allowing for the class to be auto-detected through classpath scanning. It is typically used in combination with annotated handler methods based on the @RequestMapping annotation. A Spring MVC controller is used typically in UI based applications where response is generally HTML content. The handler method returns the response ‚Äúview name‚Äù which is resolved to a view technology file (e.g. JSP) by view resolver. And then parsed view content is sent back to browser client.</p>
:ET