I"≥=<h2 id="maven">Maven</h2>

<p>Maven is a software project management and comprehension tool. With the help of Maven, Spring Boot will be able to configure and install dependencies, compile our Java code and run our class files. Below is how you can install it using Homebrew and check the version to verify for a successful installation.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>maven
mvn <span class="nt">--version</span>
</code></pre></div></div>
<p><br /></p>

<h2 id="creating-a-spring-boot-application-in-spring-tool-suite">Creating a Spring Boot Application in Spring Tool Suite</h2>

<p>Click New -&gt; Spring Starter Project and fill the below information:</p>
<ul>
  <li>Name: This will be your project name in lowercase</li>
  <li>Group: This will be a reverse domain name, example com.johndoe.learn</li>
  <li>Artifact: project_name</li>
  <li>Description: Short project description</li>
  <li>Package: Same as the group field</li>
</ul>

<p>Click Next and select ‚ÄòSpring Web‚Äô under the Available column Click Finish.</p>

<p>Our application will reside in <code class="highlighter-rouge">/src/main/java</code> , static files and templates will reside in <code class="highlighter-rouge">src/main/resources</code>.</p>

<h2 id="hello-world">Hello World</h2>
<p>Open the .java file under src/main/java and add the below code:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="c1">// Add below annotation</span>
<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldController</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">HelloWorldApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="c1">// Request mapping for root route</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"/"</span><span class="o">,</span> <span class="n">method</span><span class="o">=</span><span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">hello</span><span class="o">(){</span>
		<span class="k">return</span> <span class="s">"Hello World!"</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Make sure to import the dependencies <code class="highlighter-rouge">CMD + SHIFT + O</code> in Mac for the @RestController and @RequestMapping annotations to work. Once you run the application, visit localhost:8080 in the browser.</p>

<ul>
  <li><code class="highlighter-rouge">@RestController</code> annotation signifies that the class in our Java file is a Controller in the MVC framework, and allows our controller to respond with data.</li>
  <li><code class="highlighter-rouge">@RequestMapping</code> annotation is for mapping web requests onto specific handler classes (class level) and/or handler methods (method level). What we have used above is a method level handler. In the above example, our handler method will respond to the root (‚Äú/‚Äù) route.</li>
</ul>

<h4 id="controller">Controller</h4>
<p>In the Spring framework, a Controller is a class which is responsible for:</p>
<ol>
  <li>Prepare the model/data that needs to be displayed by the view</li>
  <li>Choosing the right view to display the data. It can also directly write into response stream by using @ResponseBody annotation and complete the request.</li>
</ol>

<p>@Controller annotation marks a class as a Spring MVC controller, allowing for the class to be auto-detected through classpath scanning. It is typically used in combination with annotated handler methods based on the @RequestMapping annotation. A Spring MVC controller is used typically in UI based applications where response is generally HTML content. The handler method returns the response ‚Äúview name‚Äù which is resolved to a view technology file (e.g. JSP) by view resolver. And then parsed view content is sent back to browser client.</p>

<h4 id="restcontroller">@RestController</h4>
<p>@RestController is a shortcut for¬† @Controller +¬†@ResponseBody. It makes development of RESTful Web Services in Spring framework easier. Response from a web application consists of HTML + CSS + JavaScript, whereas a REST API will return data in form of JSON or XML. The job of @Controller is to create a Map of model object and find a view, but @RestController simply returns the object and it‚Äôs directly written into HTTP response as JSON or XML, and parsed by client to further process it either for modifying the existing view or for any other purpose.</p>

<h4 id="method-vs-class-level-handler">Method vs. Class Level Handler</h4>
<ul>
  <li><strong>Method Level Handler</strong>: The above HelloWorld example is using a method level handler, meaning that hello() method will handle any request that comes to the ‚Äú/‚Äù path.</li>
  <li><strong>Class Level Handler</strong>: We can also annotate the whole class so that all methods respond to a certain path. In the below example, the ‚Äú/hello‚Äù route will respond with ‚ÄúHello World!‚Äù and the ‚Äú/hello/world‚Äù route will respond with ‚ÄúClass level annotations are cool too!‚Äù.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldController</span><span class="o">{</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">""</span><span class="o">,</span><span class="n">method</span><span class="o">=</span><span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">hello</span><span class="o">(){</span>
		<span class="k">return</span> <span class="s">"Hello World!"</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"/world"</span><span class="o">,</span><span class="n">method</span><span class="o">=</span><span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">world</span><span class="o">(){</span>
		<span class="k">return</span> <span class="s">"Class level annotations are cool too!"</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br /></p>
<h2 id="query-parameters">Query Parameters</h2>
<p>To implement query parameters, we need to do use the <code class="highlighter-rouge">@RequestParam</code> annotation in our methods. We could include the parameter ‚ÄúsearchQuery‚Äù as a type String (request parameters must always be of String type) and annotate it as a URL query field of ‚Äúname‚Äù. As an example, if we visit localhost:8080?name=John, we can retrieve the value of name as shown below.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">query</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"name"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">searchQuery</span> <span class="o">){</span>
	<span class="k">return</span> <span class="s">"Hello "</span> <span class="o">+</span> <span class="n">searchQuery</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
However, if we access our application without the query parameter now, it will crash. We can fix this by including the required=false parameter in the @RequestParam annotation, by default it‚Äôs set to true:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">query</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"name"</span><span class="o">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">false</span><span class="o">)</span> <span class="nc">String</span> <span class="n">searchQuery</span><span class="o">){</span>
	<span class="k">return</span> <span class="s">"Hello "</span> <span class="o">+</span> <span class="n">searchQuery</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br /></p>

<h2 id="url-parameters--path-variables">URL Parameters / Path Variables</h2>
<p>Consider this route: localhost:8080/m/59 - Each path variable plays a role to find the exact resource that needs to be displayed to the client. We can use the @PathVariable annotation as shown below:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/m/{track}"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">showLesson</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"track"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">track</span><span class="o">){</span>
	<span class="k">return</span> <span class="s">"Track: "</span> <span class="o">+</span> <span class="n">track</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br /></p>

<h2 id="thymeleaf">Thymeleaf</h2>
<p>Thymeleaf is a templating engine that allows us to write HTML while allowing placeholders for data that will come from Java objects. These placeholders will leverage the <strong>Spring Expression Language</strong> to access the fields of the Java objects from it‚Äôs getters and setters. Below are the steps we need to follow to use Thymeleaf:</p>

<ul>
  <li><strong>Step 1</strong>: Include the Thymeleaf dependency:</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.thymeleaf<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>thymeleaf<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.0.11.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<ul>
  <li><strong>Step 2</strong>: Create your templates (with .html extension) under <code class="highlighter-rouge">src/main/resources/templates</code>. Thymeleaf expects HTML to be XML compliant, which means all opening tags must have a closing tag or must be self closing.</li>
  <li><strong>Step 3</strong>: In the controller, return the HTML file name without the filename extension.</li>
</ul>

<h4 id="thymeleaf-attributes">Thymeleaf Attributes</h4>

<p><strong>th:text</strong>: th:text tells Thymeleaf to replace the content of this element with the value in quotes. Below is the syntax, variable_name and it‚Äôs value will be coming from the Controller‚Äôs ModelMap.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p</span> <span class="na">th:text=</span><span class="s">"${variable_name}"</span><span class="nt">&gt;&lt;/p&gt;</span>
</code></pre></div></div>
<p><br /></p>

<p><strong>th:each</strong>: Let‚Äôs say in our Controller, we have stored a list of Contacts - each contact has firstName and lastName attributes, and the ‚Äúcontacts‚Äù list is stored in ModelMap. In our Thymeleaf template, if we want to loop over ‚Äúcontacts‚Äù  and display it as an unordered list, below is how we will do it:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ul&gt;</span>
	<span class="nt">&lt;li</span> <span class="na">th:each=</span><span class="s">"contact: ${contacts}"</span> <span class="na">th:text = </span><span class="s">"${contact.firstName}"</span><span class="nt">&gt;&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>
<p><br /></p>

<p><strong>th:if</strong>: What if we want a certain HTML element/block to only be rendered under certain conditions? We can do so using conditional logic as shown below, where the &lt;p&gt; tag will show up if the contact attribute is empty:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p</span> <span class="na">th:if=</span><span class="s">"${contacts.size()==0}"</span><span class="nt">&gt;</span>No contacts found.<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>
<p><br /></p>

<h4 id="adding-static-assets">Adding Static Assets</h4>

<ol>
  <li>Create a home for static assets (css, images, javascript, fonts, videos etc). A standard location is <code class="highlighter-rouge">/src/main/resources/static</code> which is where Thymeleaf will expect to find them while processing our templates.</li>
  <li>Let‚Äôs say we want to add a CSS file, style.css - in order to add this in our HTML template, we need to create a self closing <code class="highlighter-rouge">&lt;link&gt;</code> tag. In the href attribute, instead of adding an absolute path to the CSS file, we can have Thymeleaf discover it by using a link URL expression. To do this, we will prefix the href attribute with <code class="highlighter-rouge">th</code>. In XML, this th is called a namespace - and may show as an error (name is not bound) by the IDE. To fix this, we have defined the namespace in the html tag as shown below. In the href attribute, the @ sign indicates that a URL should be generated here.</li>
</ol>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span> <span class="na">xmlns:th=</span><span class="s">"http://www.thymeleaf.org"</span><span class="nt">&gt;</span>
...

<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">th:href=</span><span class="s">"@{/style.css}"</span>   <span class="nt">/&gt;</span>
</code></pre></div></div>
<p><br /></p>

:ET