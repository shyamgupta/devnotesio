I"r<h2 id="introduction">Introduction</h2>
<p>GraphQL is a query language for API’s or a syntax that describes how to ask for data and is generally used to load data from a server to a client. It is an alternative to REST and allows us to request data in the exact shape we want, and also make changes to our data. GraphQL is composed of two main parts:</p>
<ul>
  <li>GraphQL Query Language (which is what we will be focusing on) is used to request data</li>
  <li>Framework which processes the queries.</li>
</ul>

<p>GraphQL benefits:</p>
<ul>
  <li>Allows us to specify the format in which we want our data</li>
  <li>Self documenting API, i.e. by looking at the API’s schema, what the data coming out of if will look like, which queries will work &amp; which one’s wont. The schema looks a lot like JSON.</li>
  <li>Ability to fetch deeply nested data in a single request.</li>
  <li>Ability to mount GraphQL in front of any existing API.</li>
  <li>Super flexible - for developing new API’s, we can start with scratch where our GraphQL server that communicates with our database. However, if we alreday have an API that communicates with the database, you can bolt GraphQL in front of that API.</li>
  <li>GraphQL does not care where the data comes from, making it useful for a wide variety of applications</li>
  <li>GraphQL is language agnostic, as its just a query language.</li>
</ul>

<p>With REST, the client hits an endpoint and gets a massive JSON object as the response. With GraphQL, instead of hitting a URL endpoint, GraphQL lets you write a query to request exactly the data we want and receive just that in the response.</p>
:ET